// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.24.2
// source: game.proto

package server

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	GameService_NewGame_FullMethodName           = "/server.GameService/NewGame"
	GameService_RemoveGame_FullMethodName        = "/server.GameService/RemoveGame"
	GameService_Join_FullMethodName              = "/server.GameService/Join"
	GameService_Leave_FullMethodName             = "/server.GameService/Leave"
	GameService_RequestTie_FullMethodName        = "/server.GameService/RequestTie"
	GameService_ListGames_FullMethodName         = "/server.GameService/ListGames"
	GameService_ListGamesFiltered_FullMethodName = "/server.GameService/ListGamesFiltered"
)

// GameServiceClient is the client API for GameService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GameServiceClient interface {
	NewGame(ctx context.Context, in *Player, opts ...grpc.CallOption) (GameService_NewGameClient, error)
	RemoveGame(ctx context.Context, in *GameRequest, opts ...grpc.CallOption) (*SuccessResponse, error)
	Join(ctx context.Context, in *GameRequest, opts ...grpc.CallOption) (GameService_JoinClient, error)
	Leave(ctx context.Context, in *GameRequest, opts ...grpc.CallOption) (*SuccessResponse, error)
	RequestTie(ctx context.Context, in *GameRequest, opts ...grpc.CallOption) (*SuccessResponse, error)
	ListGames(ctx context.Context, in *Player, opts ...grpc.CallOption) (*ListGamesResponse, error)
	ListGamesFiltered(ctx context.Context, in *FilteredGamesRequest, opts ...grpc.CallOption) (*ListGamesResponse, error)
}

type gameServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewGameServiceClient(cc grpc.ClientConnInterface) GameServiceClient {
	return &gameServiceClient{cc}
}

func (c *gameServiceClient) NewGame(ctx context.Context, in *Player, opts ...grpc.CallOption) (GameService_NewGameClient, error) {
	stream, err := c.cc.NewStream(ctx, &GameService_ServiceDesc.Streams[0], GameService_NewGame_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &gameServiceNewGameClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type GameService_NewGameClient interface {
	Recv() (*GameStream, error)
	grpc.ClientStream
}

type gameServiceNewGameClient struct {
	grpc.ClientStream
}

func (x *gameServiceNewGameClient) Recv() (*GameStream, error) {
	m := new(GameStream)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *gameServiceClient) RemoveGame(ctx context.Context, in *GameRequest, opts ...grpc.CallOption) (*SuccessResponse, error) {
	out := new(SuccessResponse)
	err := c.cc.Invoke(ctx, GameService_RemoveGame_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gameServiceClient) Join(ctx context.Context, in *GameRequest, opts ...grpc.CallOption) (GameService_JoinClient, error) {
	stream, err := c.cc.NewStream(ctx, &GameService_ServiceDesc.Streams[1], GameService_Join_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &gameServiceJoinClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type GameService_JoinClient interface {
	Recv() (*GameStream, error)
	grpc.ClientStream
}

type gameServiceJoinClient struct {
	grpc.ClientStream
}

func (x *gameServiceJoinClient) Recv() (*GameStream, error) {
	m := new(GameStream)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *gameServiceClient) Leave(ctx context.Context, in *GameRequest, opts ...grpc.CallOption) (*SuccessResponse, error) {
	out := new(SuccessResponse)
	err := c.cc.Invoke(ctx, GameService_Leave_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gameServiceClient) RequestTie(ctx context.Context, in *GameRequest, opts ...grpc.CallOption) (*SuccessResponse, error) {
	out := new(SuccessResponse)
	err := c.cc.Invoke(ctx, GameService_RequestTie_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gameServiceClient) ListGames(ctx context.Context, in *Player, opts ...grpc.CallOption) (*ListGamesResponse, error) {
	out := new(ListGamesResponse)
	err := c.cc.Invoke(ctx, GameService_ListGames_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gameServiceClient) ListGamesFiltered(ctx context.Context, in *FilteredGamesRequest, opts ...grpc.CallOption) (*ListGamesResponse, error) {
	out := new(ListGamesResponse)
	err := c.cc.Invoke(ctx, GameService_ListGamesFiltered_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GameServiceServer is the server API for GameService service.
// All implementations must embed UnimplementedGameServiceServer
// for forward compatibility
type GameServiceServer interface {
	NewGame(*Player, GameService_NewGameServer) error
	RemoveGame(context.Context, *GameRequest) (*SuccessResponse, error)
	Join(*GameRequest, GameService_JoinServer) error
	Leave(context.Context, *GameRequest) (*SuccessResponse, error)
	RequestTie(context.Context, *GameRequest) (*SuccessResponse, error)
	ListGames(context.Context, *Player) (*ListGamesResponse, error)
	ListGamesFiltered(context.Context, *FilteredGamesRequest) (*ListGamesResponse, error)
	mustEmbedUnimplementedGameServiceServer()
}

// UnimplementedGameServiceServer must be embedded to have forward compatible implementations.
type UnimplementedGameServiceServer struct {
}

func (UnimplementedGameServiceServer) NewGame(*Player, GameService_NewGameServer) error {
	return status.Errorf(codes.Unimplemented, "method NewGame not implemented")
}
func (UnimplementedGameServiceServer) RemoveGame(context.Context, *GameRequest) (*SuccessResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveGame not implemented")
}
func (UnimplementedGameServiceServer) Join(*GameRequest, GameService_JoinServer) error {
	return status.Errorf(codes.Unimplemented, "method Join not implemented")
}
func (UnimplementedGameServiceServer) Leave(context.Context, *GameRequest) (*SuccessResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Leave not implemented")
}
func (UnimplementedGameServiceServer) RequestTie(context.Context, *GameRequest) (*SuccessResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RequestTie not implemented")
}
func (UnimplementedGameServiceServer) ListGames(context.Context, *Player) (*ListGamesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListGames not implemented")
}
func (UnimplementedGameServiceServer) ListGamesFiltered(context.Context, *FilteredGamesRequest) (*ListGamesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListGamesFiltered not implemented")
}
func (UnimplementedGameServiceServer) mustEmbedUnimplementedGameServiceServer() {}

// UnsafeGameServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GameServiceServer will
// result in compilation errors.
type UnsafeGameServiceServer interface {
	mustEmbedUnimplementedGameServiceServer()
}

func RegisterGameServiceServer(s grpc.ServiceRegistrar, srv GameServiceServer) {
	s.RegisterService(&GameService_ServiceDesc, srv)
}

func _GameService_NewGame_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Player)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(GameServiceServer).NewGame(m, &gameServiceNewGameServer{stream})
}

type GameService_NewGameServer interface {
	Send(*GameStream) error
	grpc.ServerStream
}

type gameServiceNewGameServer struct {
	grpc.ServerStream
}

func (x *gameServiceNewGameServer) Send(m *GameStream) error {
	return x.ServerStream.SendMsg(m)
}

func _GameService_RemoveGame_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GameServiceServer).RemoveGame(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GameService_RemoveGame_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GameServiceServer).RemoveGame(ctx, req.(*GameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GameService_Join_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GameRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(GameServiceServer).Join(m, &gameServiceJoinServer{stream})
}

type GameService_JoinServer interface {
	Send(*GameStream) error
	grpc.ServerStream
}

type gameServiceJoinServer struct {
	grpc.ServerStream
}

func (x *gameServiceJoinServer) Send(m *GameStream) error {
	return x.ServerStream.SendMsg(m)
}

func _GameService_Leave_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GameServiceServer).Leave(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GameService_Leave_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GameServiceServer).Leave(ctx, req.(*GameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GameService_RequestTie_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GameServiceServer).RequestTie(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GameService_RequestTie_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GameServiceServer).RequestTie(ctx, req.(*GameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GameService_ListGames_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Player)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GameServiceServer).ListGames(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GameService_ListGames_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GameServiceServer).ListGames(ctx, req.(*Player))
	}
	return interceptor(ctx, in, info, handler)
}

func _GameService_ListGamesFiltered_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FilteredGamesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GameServiceServer).ListGamesFiltered(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GameService_ListGamesFiltered_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GameServiceServer).ListGamesFiltered(ctx, req.(*FilteredGamesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// GameService_ServiceDesc is the grpc.ServiceDesc for GameService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var GameService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "server.GameService",
	HandlerType: (*GameServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RemoveGame",
			Handler:    _GameService_RemoveGame_Handler,
		},
		{
			MethodName: "Leave",
			Handler:    _GameService_Leave_Handler,
		},
		{
			MethodName: "RequestTie",
			Handler:    _GameService_RequestTie_Handler,
		},
		{
			MethodName: "ListGames",
			Handler:    _GameService_ListGames_Handler,
		},
		{
			MethodName: "ListGamesFiltered",
			Handler:    _GameService_ListGamesFiltered_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "NewGame",
			Handler:       _GameService_NewGame_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "Join",
			Handler:       _GameService_Join_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "game.proto",
}
